name: PHP Composer

on:
  push:
    branches: [ stable ]
  pull_request:
    branches: [ stable ]
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test the code and create reports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: curl, json, :opcache, xdebug, mbstring, xdebug
          coverage: xdebug
          ini-values: memory_limit=-1,error_reporting=-1,log_errors_max_len=0,zend.assertions=1,assert.exception=1,xdebug.show_exception_trace=0,suhosin.executor.include.whitelist=phar,xdebug.mode="develop,coverage"

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-dev-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-dev-composer-

      - name: Install dependencies
        uses: php-actions/composer@v6
        with:
          command: install
          dev: yes
          php_version: 8.0
          version: 2
          args: --ignore-platform-reqs --prefer-dist -no --no-progress

      - name: Run tests
        run: composer test

      - name: Compress HTML code coverage
        run: |
          cd build/
          tar -czf /tmp/code-coverage-html.tar.gz code-coverage-html/

      - name: Upload HTML code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-html
          path: /tmp/code-coverage-html.tar.gz
          retention-days: 1

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=MakairaIO_oxid-connect-essential
            -Dsonar.organization=makairaio
            -Dsonar.projectName=OXID Connect Essential
            -Dsonar.language=php
            -Dsonar.sources=src
            -Dsonar.tests=tests/
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.php.tests.reportPath=build/junit.xml
            -Dsonar.php.coverage.reportPaths=build/code-coverage-clover.xml
            -Dsonar.verbose=false

  release:
    name: Create a new release
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/stable'
    steps:
      - name: Clone code repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-nodev-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-nodev-composer-

      - name: Install dependencies
        uses: php-actions/composer@v6
        with:
          command: install
          dev: no
          php_version: 8.0
          version: 2
          args: --ignore-platform-reqs --prefer-dist -no --no-progress

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install npm dependencies
        run: yarn

      - name: Semantic release
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

          GIT_AUTHOR_NAME: ${{ secrets.GIT_USERNAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_USERNAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_CREDENTIALS: ${{ secrets.GIT_CREDENTIALS }}
